1.find the duplicate number.
 class Solution {
    public int findDuplicate(int[] nums) {
        Arrays.sort(nums);
        int ans = 0;

        for (int i = 0; i < nums.length - 1; i++) {
            if (nums[i] == nums[i + 1]) {
                ans = nums[i];
            }
        }

        return ans;
    }
} 


2.Number of Good Pairs.
 class Solution {
    public int numIdenticalPairs(int[] nums) {
     int counter = 0;

     for(int i = 0; i < nums.length; i++){
         for(int j = i+1; j < nums.length; j++){
             if(nums[i] == nums[j]){
                 counter++;
                }
            }
        }
        return counter;   
    }
}


3. Find Greatest Common Divisor of Array.
class Solution {
    public int findGCD(int[] nums) {
        Arrays.sort(nums);
        int n=nums[nums.length-1];
        int result=nums[0];
        while(result>0){
            if(nums[0]%result==0 && n%result==0){
                break;
            }
            result--;
        }
        return result;
    }
}



4.Unique Number of Occurrences.
class Solution {
    public boolean uniqueOccurrences(int[] arr) {
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : arr) {
            map.put(i, map.getOrDefault(i, 0) + 1);
        }
        Set<Integer> set = new HashSet<>();
        for (int i : map.keySet()) {
            if (set.contains(map.get(i))) {
                return false;
            }
            set.add(map.get(i));
        }
        return true;
    }
}



5.Find All Duplicates in an Array.
class Solution {
    public List<Integer> findDuplicates(int[] nums) {
      List<Integer> list = new ArrayList<>();

        for(int i = 0; i < nums.length; i++) {
            int n = Math.abs(nums[i]);
            if(nums[n-1] > 0) {
                nums[n-1] = -nums[n-1];
            } else {
                list.add(Math.abs(nums[i]));
            }
        }
        return list;  
    }
}